<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Label3.Text" xml:space="preserve">
    <value>The Find Customer tab operates as a general purpose customer database query. Customers can be search via exact matching account number or by
partial matching first name, last name, or email. Search key priority is from left (highest) to right (lowest). If no parameters are specified, the search
will return all customers.</value>
  </data>
  <data name="Label1.Text" xml:space="preserve">
    <value>Modifying the movie database is very easy as a manager. For ease of use, a "Search" button is added which when pressed will search for the movie of the ID in the ID field and fill out all of the remaining fields if the movie exists. The “Clear” button allows for quick removal of every field. =This makes it easy to edit movies and to confirm a movie you are thinking of removing. To add a movie, simply fill out the details and press "Add Movie". All fields (except the ID field) must be filled and an ID will be automatically generated if one is not given. To edit a movie, use the "Search" button to fill out the fields of a movie of a specific ID and edit the fields desired, afterwards pressing "Edit Movie". Finally, to remove a movie, one can input its ID and press the "Delete Movie" button.</value>
  </data>
  <data name="Label12.Text" xml:space="preserve">
    <value>When this button is pressed, the manager is taken to an interface that prompts them for a month and a year (to be inputted in the proper, given format MM YYYY). When the fields are filled, the manager may press the “Execute” button and the sales for that month will be shown. The “Close” button will take the manager back to the data tab.</value>
  </data>
  <data name="Label7.Text" xml:space="preserve">
    <value>When this button is pressed, the manager is taken to an interface that prompts them to enter a number of rows. Depending on the radio button chosen, the grid on the right will present to the manager the inputted amount of most popular movies, users who use the app the most, or the sales reps who have overlooked the most orders when the manager presses “Execute”. The “Close” button will take the manager back to the data tab.</value>
  </data>
  <data name="Label6.Text" xml:space="preserve">
    <value>When this button is pressed, the manager is taken to an interface that prompts the manager for the name of a movie, the type of the movie, or a customer name, depending on the radio button pressed. From here, the grid on the right will update when “Execute” is pressed, showing the current rentals for the option selected. The "Close" button will take the manager back to the data tab.</value>
  </data>
  <data name="Label4.Text" xml:space="preserve">
    <value>The data tab is the hub to multiple buttons that each take the manager to a different interface. The “List Options” category will allow the manager to list items specified. The “Produce Sales Report” category allows the manager to get the income for a specific month/year. Under the “Check Activity” category, the “Most Active” button takes the manager to a user interface whereby they can see the most actively rented movies, active customers, and sales reps with the most orders overseen.</value>
  </data>
  <data name="Label9.Text" xml:space="preserve">
    <value>Modifying the manager database is much like modifying the movie database. The “Search” button has a similar function as in the movie tab, whereby when an employee SIN is entered and the “Search” button is pressed all fields will be filled out. The nearby “Clear” button will remove data from all the fields. To add an employee, simply fill out the details and press “Add Employee”. All fields need to be filled except for apartment number, a SIN will be automatically generated if one is not given and apartment number will become NULL if empty. To edit an employee, use the “Search” button to fill out the fields of the employee of a specific SIN and edit the fields desired, afterwards pressing “Edit Employee”. Finally, to remove an employee, one can input their SIN and press “Delete Employee”.</value>
  </data>
</root>